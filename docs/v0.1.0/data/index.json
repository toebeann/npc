{"id":0,"name":"@toebean/npc - v0.1.0","kind":1,"kindString":"Project","flags":{},"originalName":"","children":[],"groups":[{"title":"Interfaces","children":[133]},{"title":"Type Aliases","children":[218,48,77,46,42,40,119,132,63,118,44]},{"title":"Variables","children":[205,47,45,64,41,39,50,78,43,49]},{"title":"Functions","children":[17,1,28]}],"sources":[{"fileName":"src/index.ts","fullFileName":"/home/runner/work/npc/npc/src/index.ts","line":1,"character":0,"url":"https://github.com/toebeann/npc/blob/8f319c2/src/index.ts#L1"}],"is":{"declaration":false},"location":{"query":"index","hash":""},"text":{"readme":"<center>\n\n\n<a href=\"#npc-üõ†Ô∏è\" id=\"npc-üõ†Ô∏è\" style=\"color: inherit; text-decoration: none;\">\n  <h1>npc üõ†Ô∏è</h1>\n</a>\n<p>Easy RPC over Named Pipes</p>\n<p><a href=\"https://npmjs.org/package/@toebean/npc\" title=\"View npc on npm\"><img src=\"https://img.shields.io/npm/v/@toebean/npc.svg?logo=npm&label&labelColor=222&style=flat-square\" alt=\"npm package version\"></a> <a href=\"https://npmjs.org/package/@toebean/npc\" title=\"View npc on npm\"><img src=\"https://img.shields.io/npm/dw/@toebean/npc.svg?logo=npm&labelColor=222&style=flat-square\" alt=\"npm package downloads\"></a> <a href=\"https://toebeann.github.io/npc\" title=\"Read the documentation on Github Pages\"><img src=\"https://img.shields.io/badge/docs-informational.svg?logo=typescript&labelColor=222&style=flat-square\" alt=\"typedocs\"></a> <a href=\"https://github.com/toebeann/npc/blob/main/LICENSE\" title=\"View the license on GitHub\"><img src=\"https://img.shields.io/github/license/toebeann/npc.svg?logo=open-source-initiative&logoColor=3DA639&color=informational&labelColor=222&style=flat-square\" alt=\"license\"></a></p>\n<p><a href=\"https://github.com/toebeann/npc/actions/workflows/pnpm-test.yml\" title=\"View pnpm test on GitHub Actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/toebeann/npc/pnpm-test.yml?logo=github&logoColor=aaa&label=npm%20test&labelColor=222&style=flat-square\" alt=\"pnpm test\"></a> <a href=\"https://github.com/toebeann/npc/actions/workflows/publish-package.yml\" title=\"View publish package on GitHub Actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/toebeann/npc/publish-package.yml?logo=github&logoColor=aaa&label=publish%20package&labelColor=222&style=flat-square\" alt=\"publish package\"></a> <a href=\"https://github.com/toebeann/npc/actions/workflows/publish-docs.yml\" title=\"View publish docs on GitHub Actions\"><img src=\"https://img.shields.io/github/actions/workflow/status/toebeann/npc/publish-docs.yml?branch=main&logo=github&logoColor=aaa&label=publish%20docs&labelColor=222&style=flat-square\" alt=\"publish docs\"></a></p>\n<p><a href=\"https://github.com/toebeann/npc\" title=\"View npc on GitHub\"><img src=\"https://img.shields.io/badge/source-informational.svg?logo=github&labelColor=222&style=flat-square\" alt=\"github\"></a> <a href=\"https://twitter.com/toebean__\" title=\"Follow @toebean__ on Twitter\"><img src=\"https://img.shields.io/badge/follow-blue.svg?logo=twitter&label&labelColor=222&style=flat-square\" alt=\"twitter\"></a> <a href=\"https://github.com/sponsors/toebeann\" title=\"Sponsor npc on GitHub\"><img src=\"https://img.shields.io/badge/sponsor-e5b.svg?logo=github%20sponsors&labelColor=222&style=flat-square\" alt=\"GitHub Sponsors donation button\"></a> <a href=\"https://paypal.me/tobeyblaber\" title=\"Donate to npc with PayPal\"><img src=\"https://img.shields.io/badge/donate-e5b.svg?logo=paypal&labelColor=222&style=flat-square\" alt=\"PayPal donation button\"></a></p>\n</center>\n\n\n<a href=\"#description\" id=\"description\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Description</h2>\n</a>\n<p>npc gives you simple tools to implement functions in one process/thread, and call them from another.</p>\n<pre><code class=\"language-js\"><span class=\"pl-c\">// my-app/index.js</span>\n\n<span class=\"pl-c\">// a simple function which returns the square of a given number</span>\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">npc</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">create</span>((<span class=\"pl-smi\">n</span>) <span class=\"pl-k\">=></span> n <span class=\"pl-k\">**</span> <span class=\"pl-c1\">2</span>).<span class=\"pl-en\">listen</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>square<span class=\"pl-pds\">\"</span></span>);\n</code></pre>\n<pre><code class=\"language-js\"><span class=\"pl-c\">// some-other-app/index.js</span>\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">squared</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">call</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>square<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">8</span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(squared); <span class=\"pl-c\">// outputs 64</span>\n</code></pre>\n<p>At present, npc only supports Windows Named Pipes. Unix Named Pipes is not a priority for this package at present, but is certainly something we would like to add in future. Pull requests welcome!</p>\n\n<a href=\"#table-of-contents\" id=\"table-of-contents\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Table of contents</h2>\n</a>\n<ul>\n<li><a href=\"#npc-%EF%B8%8F\">npc üõ†Ô∏è</a><ul>\n<li><a href=\"#description\">Description</a></li>\n<li><a href=\"#table-of-contents\">Table of contents</a></li>\n<li><a href=\"#installation\">Installation</a><ul>\n<li><a href=\"#pnpm\">pnpm</a></li>\n<li><a href=\"#yarn\">yarn</a></li>\n<li><a href=\"#npm\">npm</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\">Usage</a><ul>\n<li><a href=\"#asyncawait\"><code>async</code>/<code>await</code></a></li>\n<li><a href=\"#notify-disregarding-output-for-efficiency\"><code>notify</code>: disregarding output for efficiency</a><ul>\n<li><a href=\"#implications-of-the-notify-api\">Implications of the <code>notify</code> API</a></li>\n</ul>\n</li>\n<li><a href=\"#argument-and-return-types\">Argument and return types</a></li>\n</ul>\n</li>\n<li><a href=\"#license\">License</a></li>\n</ul>\n</li>\n</ul>\n\n<a href=\"#installation\" id=\"installation\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Installation</h2>\n</a>\n\n<a href=\"#pnpm\" id=\"pnpm\" style=\"color: inherit; text-decoration: none;\">\n  <h3><a href=\"https://pnpm.io\" title=\"pnpm is a fast, disk space efficient package manager\">pnpm</a></h3>\n</a>\n<pre><code class=\"language-shell\">pnpm add @toebean/npc\n</code></pre>\n\n<a href=\"#yarn\" id=\"yarn\" style=\"color: inherit; text-decoration: none;\">\n  <h3><a href=\"https://yarnpkg.com\" title=\"Yarn is a package manager that doubles down as project manager\">yarn</a></h3>\n</a>\n<pre><code class=\"language-shell\">yarn add @toebean/npc\n</code></pre>\n\n<a href=\"#npm\" id=\"npm\" style=\"color: inherit; text-decoration: none;\">\n  <h3><a href=\"https://npmjs.com\" title=\"npm is the package manager for Node.js\">npm</a></h3>\n</a>\n<pre><code class=\"language-shell\">npm i @toebean/npc\n</code></pre>\n\n<a href=\"#usage\" id=\"usage\" style=\"color: inherit; text-decoration: none;\">\n  <h2>Usage</h2>\n</a>\n<p>Setting up a function to be called from a local process is easy with npc:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">create</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">npc</span> <span class=\"pl-k\">=</span> <span class=\"pl-en\">create</span>((<span class=\"pl-smi\">n</span>) <span class=\"pl-k\">=></span> n <span class=\"pl-k\">**</span> <span class=\"pl-c1\">2</span>);\n<span class=\"pl-k\">await</span> <span class=\"pl-smi\">npc</span>.<span class=\"pl-en\">listen</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>square<span class=\"pl-pds\">\"</span></span>);\n</code></pre>\n<p>And calling it is just as easy:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">call</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">x</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">8</span>;\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">xSquared</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">call</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>square<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-c1\">8</span>);\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(xSquared); <span class=\"pl-c\">// outputs 64</span>\n<span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">typeof</span> xSquared); <span class=\"pl-c\">// outputs 'number'</span>\n</code></pre>\n<p>Please note that it is the callee&#39;s responsibility to validate input, and the caller&#39;s responsibility to validate the return output. We recommend <a href=\"https://zod.dev\">Zod</a> for validation.</p>\n<p>For convenience, there is an alternative constructor which takes a middleware callback as the second argument. This middleware function can be used to validate and/or transform the incoming argument before it is passed to the callback.</p>\n<p>Here is an example which uses <a href=\"https://zod.dev\">Zod</a> to validate the input is a number:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">create</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">z</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>zod<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">const</span> <span class=\"pl-c1\">npc</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">create</span>((<span class=\"pl-smi\">n</span>) <span class=\"pl-k\">=></span> n <span class=\"pl-k\">**</span> <span class=\"pl-c1\">2</span>, <span class=\"pl-smi\">z</span>.<span class=\"pl-en\">number</span>().<span class=\"pl-smi\">parse</span>).<span class=\"pl-en\">listen</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>square<span class=\"pl-pds\">\"</span></span>);\n</code></pre>\n<p>Now, if the client passes an invalid argument, Zod will throw an exception detailing the cause of the exception:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">inspect</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>util<span class=\"pl-pds\">\"</span></span>;\n<span class=\"pl-k\">import</span> { <span class=\"pl-smi\">call</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">try</span> {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">log</span>(<span class=\"pl-k\">await</span> <span class=\"pl-en\">call</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>square<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>foo<span class=\"pl-pds\">\"</span></span>));\n} <span class=\"pl-k\">catch</span> (error) {\n  <span class=\"pl-en\">console</span>.<span class=\"pl-c1\">error</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>error:<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-en\">inspect</span>(error, <span class=\"pl-c1\">false</span>, <span class=\"pl-c1\">null</span>));\n}\n<span class=\"pl-c\">// error: {</span>\n<span class=\"pl-c\">//   code: -32000,</span>\n<span class=\"pl-c\">//   message: 'Internal server error',</span>\n<span class=\"pl-c\">//   data: {</span>\n<span class=\"pl-c\">//     issues: [</span>\n<span class=\"pl-c\">//       {</span>\n<span class=\"pl-c\">//         code: 'invalid_type',</span>\n<span class=\"pl-c\">//         expected: 'number',</span>\n<span class=\"pl-c\">//         received: 'string',</span>\n<span class=\"pl-c\">//         path: [],</span>\n<span class=\"pl-c\">//         message: 'Expected number, received string'</span>\n<span class=\"pl-c\">//       }</span>\n<span class=\"pl-c\">//     ],</span>\n<span class=\"pl-c\">//     name: 'ZodError'</span>\n<span class=\"pl-c\">//   }</span>\n<span class=\"pl-c\">// }</span>\n</code></pre>\n\n<a href=\"#asyncawait\" id=\"asyncawait\" style=\"color: inherit; text-decoration: none;\">\n  <h3><code>async</code>/<code>await</code></h3>\n</a>\n<p>Asynchronous functions are fully supported:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">await</span> <span class=\"pl-en\">create</span>(<span class=\"pl-k\">async</span> () <span class=\"pl-k\">=></span> {\n  <span class=\"pl-k\">const</span> <span class=\"pl-c1\">response</span> <span class=\"pl-k\">=</span> <span class=\"pl-k\">await</span> <span class=\"pl-en\">fetch</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>https://catfact.ninja/fact<span class=\"pl-pds\">\"</span></span>);\n  <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">response</span>.<span class=\"pl-smi\">ok</span>) {\n    <span class=\"pl-k\">return</span> (<span class=\"pl-k\">await</span> <span class=\"pl-smi\">response</span>.<span class=\"pl-en\">json</span>()).<span class=\"pl-smi\">fact</span>;\n  } <span class=\"pl-k\">else</span> {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-s\"><span class=\"pl-pds\">`</span><span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-smi\">response</span><span class=\"pl-s1\">.</span><span class=\"pl-c1\">status</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span>: <span class=\"pl-pse\"><span class=\"pl-s1\">${</span></span><span class=\"pl-smi\">response</span><span class=\"pl-s1\">.</span><span class=\"pl-c1\">statusText</span><span class=\"pl-pse\"><span class=\"pl-s1\">}</span></span><span class=\"pl-pds\">`</span></span>;\n  }\n}).<span class=\"pl-en\">listen</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getCatFact<span class=\"pl-pds\">\"</span></span>);\n</code></pre>\n\n<a href=\"#notify-disregarding-output-for-efficiency\" id=\"notify-disregarding-output-for-efficiency\" style=\"color: inherit; text-decoration: none;\">\n  <h3><code>notify</code>: disregarding output for efficiency</h3>\n</a>\n<p>If you do not require any output from an npc procedure and do not need to wait for it to complete, consider using the <code>notify</code> API instead of <code>call</code>:</p>\n<pre><code class=\"language-js\"><span class=\"pl-k\">import</span> { <span class=\"pl-smi\">notify</span> } <span class=\"pl-k\">from</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@toebean/npc<span class=\"pl-pds\">\"</span></span>;\n\n<span class=\"pl-k\">await</span> <span class=\"pl-en\">notify</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>registerData<span class=\"pl-pds\">\"</span></span>, { foo<span class=\"pl-k\">:</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>bar<span class=\"pl-pds\">\"</span></span>, bar<span class=\"pl-k\">:</span> <span class=\"pl-c1\">123</span> });\n</code></pre>\n<p>The above call to <code>notify</code> will resolve as soon as the input argument <code>{ foo: &quot;bar&quot; }</code> has been transmitted across the named pipe without waiting for a response. If the npc procedure at the other end of the pipe was implemented with this library, it will also not transmit a response, resulting in more efficient usage of the pipe.</p>\n\n<a href=\"#implications-of-the-notify-api\" id=\"implications-of-the-notify-api\" style=\"color: inherit; text-decoration: none;\">\n  <h4>Implications of the <code>notify</code> API</h4>\n</a>\n<ul>\n<li>The procedure at the other end of the pipe will likely not have completed when <code>notify</code> resolves. If you need to perform an action upon its completion, you should instead use the <code>call</code> API.</li>\n<li>If an error is thrown at the other end of the pipe, <code>notify</code> will neither throw nor output error information. If you need to know whether the call succeeded, you should instead use the <code>call</code> API.</li>\n</ul>\n\n<a href=\"#argument-and-return-types\" id=\"argument-and-return-types\" style=\"color: inherit; text-decoration: none;\">\n  <h3>Argument and return types</h3>\n</a>\n<p>Input arguments and return outputs are serialized to JSON using <code>JSON.stringify</code> before being transmitted over the named pipe, and deserialized using <code>JSON.parse</code> at the other end. This means that types which cannot be (de)serialized using these functions will be transmitted as <code>undefined</code>. We generally recommend sticking to <a href=\"https://en.wikipedia.org/wiki/Passive_data_structure\" title=\"plain old data objects\">PODs</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Primitive\">primitives</a> (with the exception of <code>bigint</code> and <code>symbol</code>, which are not natively compatible with JSON).</p>\n<p>npc procedures only support a maximum of one argument for simplicity. If you require multiple arguments you can handle this with <a href=\"https://en.wikipedia.org/wiki/Passive_data_structure\" title=\"plain old data objects\">PODs</a> (e.g. object literals, property bags) or arrays.</p>\n\n<a href=\"#license\" id=\"license\" style=\"color: inherit; text-decoration: none;\">\n  <h2>License</h2>\n</a>\n<p>npc is licensed under <a href=\"https://github.com/toebeann/npc/blob/main/LICENSE\">MIT</a> ¬© 2023 Tobey Blaber.</p>\n"}}
